# -*- coding: utf-8 -*-
"""Export processing results to Timesketch."""

from __future__ import print_function
from __future__ import unicode_literals

from dftimewolf.lib import module
from dftimewolf.lib.modules import manager as modules_manager

from timesketch_import_client import importer
"""
containers -> TicketAttribute

self.type = type_
self.name = name
self.value = value

Plan of action:
  import importer
  import api client
  in SetUp set upt he API client (this will be overwritten)
    -> read a config for OAUTH, don't have it all as parameters
  Make sure we have a function to call to get sketch ID
    -> will be overwritten in other SIEM Solutions
  Do all actions in other functions that can be used "straight"
      up in the internal version, so that no modifications
      are needed, except in the "get sketch" and "setup"
      functions.

Later changes.
  Use cryptography to dump the creds for OAUTH client in the FOSS


  \ADD A CONFIG LIBRARY
  READ CONFIG
    KNOWS WHAT HAS BEEN SET AND CAN BE ASKED IF SOMETHING HAS
    BEEN SET OR NOT (USED BY A FRONTEND THAT ASKS QUESTIONS)
  CONFIGURES THE API CLIENT

  CHANGE THE API CLIENT , ADD SET FUNCTIONS
"""

class TimesketchExporter(module.BaseModule):
  """Exports a given set of plaso or CSV files to Timesketch.

  input: A list of paths to plaso or CSV files.
  output: A URL to the generated timeline.

  Attributes:
    incident_id (str): Incident ID or reference. Used in sketch description.
    sketch_id (int): Sketch ID to add the resulting timeline to. If not
        provided, a new sketch is created.
    timesketch_api (TimesketchApiClient): Timesketch API client.
  """

  def __init__(self, state):
    super(TimesketchExporter, self).__init__(state)
    self.incident_id = None
    self.sketch_id = None
    self.timesketch_api = None

  def SetUp(self,  # pylint: disable=arguments-differ
            incident_id=None,
            sketch_id=None,
            verify_tls=True,
            auth_mode='timesketch'):
    """Setup a connection to a Timesketch server and create a sketch if needed.

    Args:
      incident_id (Optional[str]): Incident ID or reference. Used in sketch
          description.
      sketch_id (Optional[int]): Sketch ID to add the resulting timeline to.
          If not provided, a new sketch is created.
      verify_tls (Optional[bool]): Whether to verify the certificate provided
          by the Timesketch endpoint.
      auth_mode (Optional[str]): The authentication mode to use. Defaults to
          'timesketch. 'Supported values are 'timesketch' (Timesketch login
          form) and 'http-basic' (HTTP Basic authentication).
    """
    self.timesketch_api = timesketch_utils.GetApiClient(self.state)
    self.incident_id = None
    self.sketch_id = int(sketch_id) if sketch_id else None

    # Check that we have a timesketch session.
    if not (self.timesketch_api or self.timesketch_api.session):
      message = 'Could not connect to Timesketch server at ' + endpoint
      self.state.AddError(message, critical=True)
      return

    if not self.sketch_id:  # No sketch id is provided, create it.
      if incident_id:
        sketch_name = 'Sketch for incident ID: ' + incident_id
      else:
        sketch_name = 'Untitled sketch'
      sketch_description = 'Sketch generated by dfTimewolf'

      sketch = self.timesketch_api.create_sketch(
          sketch_name, sketch_description)
      self.sketch_id = sketch.id
      print('Sketch {0:d} created'.format(self.sketch_id))

  def Process(self):
    """Executes a Timesketch export."""
    if not self.timesketch_api:
      message = 'Could not connect to Timesketch server'
      self.state.AddError(message, critical=True)

    sketch = self.timesketch_api.get_sketch(self.sketch_id)

    with importer.ImportStreamer() as streamer:
      streamer.set_sketch(sketch)

      for description, path in self.state.input:
        if not description:
          description = 'untitled timeline for {0:s}'.format(path)

        streamer.set_timeline_name(description)
        streamer.add_file(path)

    sketch_url = '{0:s}sketches/{1:d}/'.format(sketch.api.api_root, sketch.id)
    print('Your Timesketch URL is: {0:s}'.format(sketch_url))
    self.state.output = sketch_url


modules_manager.ModulesManager.RegisterModule(TimesketchExporter)
