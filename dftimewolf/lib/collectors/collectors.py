# -*- coding: utf-8 -*-
"""DFTimewolf artifact collectors, responsible for collecting artifacts."""

import threading

from dftimewolf.lib import utils


class BaseCollector(threading.Thread):
  """Base class for collectors.

  Attributes:
    console_out: DFTimewolfConsoleOutput helper.
    results: List of collector results.
    errors: List of errors generated by the collector.
  """

  def __init__(self, verbose):
    """Initialize the base collector object.

    Args:
      verbose: (Optional[bool]) whether verbose output is desired.
    """
    super(BaseCollector, self).__init__()
    self.console_out = utils.DFTimewolfConsoleOutput(
        sender=self.__class__.__name__, verbose=verbose)
    self.results = []
    self.errors = []

  def run(self):
    self.results = self.collect()

  def collect(self):
    """Collect artifacts.

    Returns:
      list(tuple): containing:
          str: human-readable description of the source of the collection. For
              example, the name of the source host.
          str: path to the collected data.
    """
    raise NotImplementedError

  @property
  def collection_name(self):
    """Name for the collection of artifacts."""
    raise NotImplementedError
