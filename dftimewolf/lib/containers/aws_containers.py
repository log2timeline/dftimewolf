# -*- coding: utf-8 -*-
"""AWS specific containers."""

from typing import List

from dftimewolf.lib.containers import interface


class S3Image:
  """Container for an EBS image file stored in S3, generated by
  libcloudforensics.providers.aws.forensics.CopyEBSSnapshotToS3."""

  def __init__(self, image_path: str, hash_paths: List[str]):
    """Initialise an S3Image object.

    Args:
      image_path (str): a path to the image file.
      hash_paths (list[str]): Lost of files with the hashes of the image file.
    """
    self.image_path = image_path if image_path.startswith('s3://') else \
        's3://' + image_path
    self.hash_paths = [path if path.startswith('s3://') else 's3://' + path \
        for path in hash_paths]

  def __eq__(self, other):
    """Comparison function. Needed for unit tests."""
    return self.image_path == other.image_path and \
           sorted(self.hash_paths) == sorted(other.hash_paths)


class AWSAttributeContainer(interface.AttributeContainer):
  """Attribute container definition for AWS resources.

  Attributes:
    snapshots (list[str]): List of snapshot IDs.
    volumes (list[str]): List of volume IDs.
    s3_images (list[S3Image]): List of S3Images
  """
  CONTAINER_TYPE = 'awsattributecontainer'

  def __init__(self):
    """Initializes the AWSAttributeContainer"""
    super(AWSAttributeContainer, self).__init__()
    self.snapshots = []
    self.volumes = []
    self.s3_images = []

  def SetSnapshotIDs(self, snapshot_ids: List[str]) -> None:
    """Sets the snapshot ids list.

    Args:
      snapshot_ids (List[str]): The list of snapshot IDs.
    """
    self.snapshots = snapshot_ids

  def SetVolumeIDs(self, volume_ids: List[str]) -> None:
    """Sets the volume ids list.

    Args:
      volume_ids (List[str]): The list of volume IDs.
    """
    self.volumes = volume_ids

  def AppendS3Image(self, s3_image: S3Image):
    """Append a value to a list of S3 paths.

    Args:
      s3_image (S3Image): The S3 path to append.
    """
    self.s3_images.append(s3_image)
