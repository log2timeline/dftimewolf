"""Tests for the ContainerManager."""

import unittest

import pandas as pd

from dftimewolf.lib.containers import containers
from dftimewolf.lib.containers import interface
from dftimewolf.lib.containers import manager


# Test recipe layout, for visual ease.
#
# Preflights:
#           Preflight1
#              |------------------------------------
#              |                 |                 |
#           Preflight2_1      Preflight2_2         |
#                                                  |
# Main Modules:                                    |
#           ModuleB           ModuleC           ModuleA
#      --------|                 |                 |
#      |       |------------------                 |
#      |    ModuleD                                |
#      |       |                                   |
#      --------|------------------------------------
#           ModuleE
#

_TEST_RECIPE = {
  'preflights': [
    {
      'name': 'Preflight1',
      'wants': []
    },
    {
      'name': 'Preflight2',
      'runtime_name': 'Preflight2_1',
      'wants': ['Preflight1']
    },
    {
      'name': 'Preflight2',
      'runtime_name': 'Preflight2_2',
      'wants': ['Preflight1']
    }
  ],
  'modules': [
    {
      'name': 'ModuleA',
      'wants': ['Preflight1']
    },
    {
      'name': 'ModuleB',
      'wants': []
    },
    {
      'name': 'ModuleC',
      'wants': []
    },
    {
      'name': 'ModuleD',
      'wants': ['ModuleB', 'ModuleC']
    },
    {
      'name': 'ModuleE',
      'wants': ['ModuleA', 'ModuleB', 'ModuleD']
    }
  ]
}


class _TestContainer1(interface.AttributeContainer):
  """A Test container."""
  CONTAINER_TYPE = 'test1'

  def __init__(self, param: str):
    super().__init__()
    self.param = param


class _TestContainer2(_TestContainer1):
  """A Test container."""
  CONTAINER_TYPE = 'test2'


class _TestContainer3(interface.AttributeContainer):
  """A Test container."""
  CONTAINER_TYPE = 'test3'

  def __init__(self, field: str):
    super().__init__()
    self.field = field


class ContainerManagerTest(unittest.TestCase):
  """Tests for the ContainerManager."""

  def setUp(self):
    """Set up."""
    super().setUp()

    self._container_manager = manager.ContainerManager()

  def test_GetWithoutRecipeParsed(self):
    """Tests an error is thrown getting containers before a recipe is parsed."""
    with self.assertRaisesRegex(
        RuntimeError, "Container manager has not parsed a recipe yet"):
      self._container_manager.GetContainers('test_module', containers.File)

  def test_StoreWithoutRecipeParsed(self):
    """Tests an error is thrown storing containers before a recipe is parsed."""
    with self.assertRaisesRegex(
        RuntimeError, "Container manager has not parsed a recipe yet"):
      self._container_manager.StoreContainer('test_module',
                                             containers.File('foo', 'foo'))

  def test_ContainerVisibility(self):
    """Tests correct delivery from generating to consuming modules."""
    self._container_manager.ParseRecipe(_TEST_RECIPE)

    # Have every module store a unique container
    for c in (_TEST_RECIPE.get('preflights', []) +
              _TEST_RECIPE.get('modules', [])):
      name = c.get('runtime_name', c['name'])
      self._container_manager.StoreContainer(
        source_module=name, container=_TestContainer1(f'Stored by {name}'))

    with self.subTest('Preflight1'):
      # Only the container generated by itself
      actual = self._container_manager.GetContainers(
          requesting_module='Preflight1', container_class=_TestContainer1)
      self.assertEqual(len(actual), 1)
      self.assertIn(_TestContainer1('Stored by Preflight1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_2'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleA'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleB'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleC'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleD'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleE'), actual)

    with self.subTest('Preflight2_1'):
      # The container from itself, and Preflight1
      actual = self._container_manager.GetContainers(
          requesting_module='Preflight2_1', container_class=_TestContainer1)
      self.assertEqual(len(actual), 2)
      self.assertIn(_TestContainer1('Stored by Preflight1'), actual)
      self.assertIn(_TestContainer1('Stored by Preflight2_1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_2'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleA'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleB'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleC'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleD'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleE'), actual)

    with self.subTest('Preflight2_2'):
      # The container from itself, and Preflight1
      actual = self._container_manager.GetContainers(
          requesting_module='Preflight2_2', container_class=_TestContainer1)
      self.assertEqual(len(actual), 2)
      self.assertIn(_TestContainer1('Stored by Preflight1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_1'), actual)
      self.assertIn(_TestContainer1('Stored by Preflight2_2'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleA'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleB'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleC'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleD'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleE'), actual)

    with self.subTest('ModuleA'):
      # The container from itself, and Preflight1
      actual = self._container_manager.GetContainers(
          requesting_module='ModuleA', container_class=_TestContainer1)
      self.assertEqual(len(actual), 2)
      self.assertIn(_TestContainer1('Stored by Preflight1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_2'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleA'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleB'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleC'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleD'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleE'), actual)

    with self.subTest('ModuleB'):
      # The container from itself only
      actual = self._container_manager.GetContainers(
          requesting_module='ModuleB', container_class=_TestContainer1)
      self.assertEqual(len(actual), 1)
      self.assertNotIn(_TestContainer1('Stored by Preflight1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_2'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleA'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleB'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleC'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleD'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleE'), actual)

    with self.subTest('ModuleC'):
      # The container from itself only
      actual = self._container_manager.GetContainers(
          requesting_module='ModuleC', container_class=_TestContainer1)
      self.assertEqual(len(actual), 1)
      self.assertNotIn(_TestContainer1('Stored by Preflight1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_2'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleA'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleB'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleC'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleD'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleE'), actual)

    with self.subTest('ModuleD'):
      # The container from itself, Modules B and C
      actual = self._container_manager.GetContainers(
          requesting_module='ModuleD', container_class=_TestContainer1)
      self.assertEqual(len(actual), 3)
      self.assertNotIn(_TestContainer1('Stored by Preflight1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_2'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleA'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleB'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleC'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleD'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleE'), actual)

    with self.subTest('ModuleE'):
      # The container from itself, Modules A, B and D
      actual = self._container_manager.GetContainers(
          requesting_module='ModuleE', container_class=_TestContainer1)
      self.assertEqual(len(actual), 4)
      self.assertNotIn(_TestContainer1('Stored by Preflight1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_2'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleA'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleB'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleC'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleD'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleE'), actual)

  def test_MultipleContainerTypes(self):
    """Tests that when a generator stores multiple container types, only the
    requested are returned.
    """
    self._container_manager.ParseRecipe(_TEST_RECIPE)

    self._container_manager.StoreContainer(
        source_module='Preflight1', container=_TestContainer1('param1'))
    self._container_manager.StoreContainer(
        source_module='Preflight1', container=_TestContainer2('param2'))

    actual_tc1 = self._container_manager.GetContainers(
        requesting_module='ModuleA', container_class=_TestContainer1)
    actual_tc2 = self._container_manager.GetContainers(
        requesting_module='ModuleA', container_class=_TestContainer2)

    self.assertEqual(len(actual_tc1), 1)
    self.assertEqual(len(actual_tc2), 1)

    self.assertIn(_TestContainer1('param1'), actual_tc1)
    self.assertIn(_TestContainer2('param2'), actual_tc2)

  def test_MetadataFilter(self):
    """Tests that metdata filters correctly filter containers returned."""
    self._container_manager.ParseRecipe(_TEST_RECIPE)
    c1 = _TestContainer1('param1')
    c2 = _TestContainer1('param2')
    c3 = _TestContainer1('param3')
    c4 = _TestContainer1('param4')

    c1.SetMetadata('Key_1', 'Value_1')
    c2.SetMetadata('Key_1', 'Value_2')
    c3.SetMetadata('Key_2', 'Value_1')
    c4.SetMetadata('Key_2', 'Value_1')

    self._container_manager.StoreContainer(
        source_module='Preflight1', container=c1)
    self._container_manager.StoreContainer(
        source_module='Preflight1', container=c2)
    self._container_manager.StoreContainer(
        source_module='Preflight1', container=c3)
    self._container_manager.StoreContainer(
        source_module='Preflight1', container=c4)

    with self.subTest('No metadata filter'):
      actual = self._container_manager.GetContainers(
          requesting_module='ModuleA', container_class=_TestContainer1)
      self.assertEqual(len(actual), 4)
      self.assertIn(_TestContainer1('param1'), actual)
      self.assertIn(_TestContainer1('param2'), actual)
      self.assertIn(_TestContainer1('param3'), actual)
      self.assertIn(_TestContainer1('param4'), actual)

    with self.subTest('No matching key'):
      actual = self._container_manager.GetContainers(
          requesting_module='ModuleA',
          container_class=_TestContainer1,
          metadata_filter_key='no_matching_key',
          metadata_filter_value='Value_1')
      self.assertEqual(len(actual), 0)

    with self.subTest('No matching value'):
      actual = self._container_manager.GetContainers(
          requesting_module='ModuleA',
          container_class=_TestContainer1,
          metadata_filter_key='Key_1',
          metadata_filter_value='no_matching_value')
      self.assertEqual(len(actual), 0)

    with self.subTest('key_1_value_1'):
      actual = self._container_manager.GetContainers(
          requesting_module='ModuleA',
          container_class=_TestContainer1,
          metadata_filter_key='Key_1',
          metadata_filter_value='Value_1')
      self.assertEqual(len(actual), 1)
      self.assertIn(_TestContainer1('param1'), actual)

    with self.subTest('key_2_value_1'):
      actual = self._container_manager.GetContainers(
          requesting_module='ModuleA',
          container_class=_TestContainer1,
          metadata_filter_key='Key_2',
          metadata_filter_value='Value_1')
      self.assertEqual(len(actual), 2)
      self.assertIn(_TestContainer1('param3'), actual)
      self.assertIn(_TestContainer1('param4'), actual)

  def test_MetadataFilterErrors(self):
    """Tests error modes using metadata filters on retrieval."""
    self._container_manager.ParseRecipe(_TEST_RECIPE)
    c = _TestContainer1('param1')
    c.SetMetadata('key', 'value')

    self._container_manager.StoreContainer(
        source_module='Preflight1', container=c)

    with self.subTest('No key'):
      with self.assertRaisesRegex(
          RuntimeError, 'Must specify both key and value for attribute filter'):
        self._container_manager.GetContainers(
          requesting_module='ModuleA',
          container_class=_TestContainer1,
          metadata_filter_key=None,
          metadata_filter_value='value')

    with self.subTest('No value'):
      with self.assertRaisesRegex(
          RuntimeError, 'Must specify both key and value for attribute filter'):
        self._container_manager.GetContainers(
          requesting_module='ModuleA',
          container_class=_TestContainer1,
          metadata_filter_key='key')

  def test_MarkCompletion(self):
    """Tests container cleanup when marking modules as completed."""
    self._container_manager.ParseRecipe(_TEST_RECIPE)

    # Have every module store a unique container
    for c in (_TEST_RECIPE.get('preflights', []) +
              _TEST_RECIPE.get('modules', [])):
      name = c.get('runtime_name', c['name'])
      self._container_manager.StoreContainer(
        source_module=name, container=_TestContainer1(f'Stored by {name}'))

    with self.subTest('Preflight1'):
      self._container_manager.CompleteModule('Preflight1')

      actual = self._container_manager.GetContainers(
          requesting_module='Preflight1', container_class=_TestContainer1)
      self.assertEqual(1, len(actual))
      self.assertIn(_TestContainer1('Stored by Preflight1'), actual)

      actual = self._container_manager.GetContainers(
          requesting_module='Preflight2_1', container_class=_TestContainer1)
      self.assertEqual(2, len(actual))
      self.assertIn(_TestContainer1('Stored by Preflight1'), actual)
      self.assertIn(_TestContainer1('Stored by Preflight2_1'), actual)

      actual = self._container_manager.GetContainers(
          requesting_module='Preflight2_2', container_class=_TestContainer1)
      self.assertEqual(2, len(actual))
      self.assertIn(_TestContainer1('Stored by Preflight1'), actual)
      self.assertIn(_TestContainer1('Stored by Preflight2_2'), actual)

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleA', container_class=_TestContainer1)
      self.assertEqual(2, len(actual))
      self.assertIn(_TestContainer1('Stored by Preflight1'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleA'), actual)

    with self.subTest('Preflight2_1'):
      self._container_manager.CompleteModule('Preflight2_1')

      actual = self._container_manager.GetContainers(
          requesting_module='Preflight2_1', container_class=_TestContainer1)
      self.assertEqual(1, len(actual))
      self.assertIn(_TestContainer1('Stored by Preflight1'), actual)

      actual = self._container_manager.GetContainers(
          requesting_module='Preflight2_2', container_class=_TestContainer1)
      self.assertEqual(2, len(actual))
      self.assertIn(_TestContainer1('Stored by Preflight1'), actual)
      self.assertIn(_TestContainer1('Stored by Preflight2_2'), actual)

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleA', container_class=_TestContainer1)
      self.assertEqual(2, len(actual))
      self.assertIn(_TestContainer1('Stored by Preflight1'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleA'), actual)

    with self.subTest('Preflight2_2'):
      self._container_manager.CompleteModule('Preflight2_2')

      actual = self._container_manager.GetContainers(
          requesting_module='Preflight2_1', container_class=_TestContainer1)
      self.assertEqual(1, len(actual))
      self.assertIn(_TestContainer1('Stored by Preflight1'), actual)

      actual = self._container_manager.GetContainers(
          requesting_module='Preflight2_2', container_class=_TestContainer1)
      self.assertEqual(1, len(actual))
      self.assertIn(_TestContainer1('Stored by Preflight1'), actual)

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleA', container_class=_TestContainer1)
      self.assertEqual(2, len(actual))
      self.assertIn(_TestContainer1('Stored by Preflight1'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleA'), actual)

    with self.subTest('ModuleA'):
      self._container_manager.CompleteModule('ModuleA')

      actual = self._container_manager.GetContainers(
          requesting_module='Preflight2_1', container_class=_TestContainer1)
      self.assertEqual(0, len(actual))

      actual = self._container_manager.GetContainers(
          requesting_module='Preflight2_2', container_class=_TestContainer1)
      self.assertEqual(0, len(actual))

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleA', container_class=_TestContainer1)
      self.assertEqual(1, len(actual))
      self.assertIn(_TestContainer1('Stored by ModuleA'), actual)

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleE', container_class=_TestContainer1)
      self.assertEqual(4, len(actual))
      self.assertIn(_TestContainer1('Stored by ModuleA'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleB'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleD'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleE'), actual)

    with self.subTest('ModuleB'):
      self._container_manager.CompleteModule('ModuleB')

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleA', container_class=_TestContainer1)
      self.assertEqual(1, len(actual))
      self.assertIn(_TestContainer1('Stored by ModuleA'), actual)

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleB', container_class=_TestContainer1)
      self.assertEqual(1, len(actual))
      self.assertIn(_TestContainer1('Stored by ModuleB'), actual)

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleC', container_class=_TestContainer1)
      self.assertEqual(1, len(actual))
      self.assertIn(_TestContainer1('Stored by ModuleC'), actual)

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleD', container_class=_TestContainer1)
      self.assertEqual(3, len(actual))
      self.assertIn(_TestContainer1('Stored by ModuleB'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleC'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleD'), actual)

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleE', container_class=_TestContainer1)
      self.assertEqual(4, len(actual))
      self.assertIn(_TestContainer1('Stored by ModuleA'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleB'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleD'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleE'), actual)

    with self.subTest('ModuleC'):
      self._container_manager.CompleteModule('ModuleC')

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleA', container_class=_TestContainer1)
      self.assertEqual(1, len(actual))
      self.assertIn(_TestContainer1('Stored by ModuleA'), actual)

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleB', container_class=_TestContainer1)
      self.assertEqual(1, len(actual))
      self.assertIn(_TestContainer1('Stored by ModuleB'), actual)

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleC', container_class=_TestContainer1)
      self.assertEqual(1, len(actual))
      self.assertIn(_TestContainer1('Stored by ModuleC'), actual)

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleD', container_class=_TestContainer1)
      self.assertEqual(3, len(actual))
      self.assertIn(_TestContainer1('Stored by ModuleB'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleC'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleD'), actual)

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleE', container_class=_TestContainer1)
      self.assertEqual(4, len(actual))
      self.assertIn(_TestContainer1('Stored by ModuleA'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleB'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleD'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleE'), actual)

    with self.subTest('ModuleD'):
      self._container_manager.CompleteModule('ModuleD')

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleA', container_class=_TestContainer1)
      self.assertEqual(1, len(actual))
      self.assertIn(_TestContainer1('Stored by ModuleA'), actual)

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleB', container_class=_TestContainer1)
      self.assertEqual(1, len(actual))
      self.assertIn(_TestContainer1('Stored by ModuleB'), actual)

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleC', container_class=_TestContainer1)
      self.assertEqual(0, len(actual))

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleD', container_class=_TestContainer1)
      self.assertEqual(2, len(actual))
      self.assertIn(_TestContainer1('Stored by ModuleB'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleD'), actual)

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleE', container_class=_TestContainer1)
      self.assertEqual(4, len(actual))
      self.assertIn(_TestContainer1('Stored by ModuleA'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleB'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleD'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleE'), actual)

    with self.subTest('ModuleE'):
      self._container_manager.CompleteModule('ModuleE')

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleA', container_class=_TestContainer1)
      self.assertEqual(0, len(actual))

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleB', container_class=_TestContainer1)
      self.assertEqual(0, len(actual))

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleC', container_class=_TestContainer1)
      self.assertEqual(0, len(actual))

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleD', container_class=_TestContainer1)
      self.assertEqual(0, len(actual))

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleE', container_class=_TestContainer1)
      self.assertEqual(0, len(actual))

  def test_PopContainers(self):
    """Tests GetContainers with pop=True."""
    self._container_manager.ParseRecipe(_TEST_RECIPE)

    # Store some containers as prep
    self._container_manager.StoreContainer(
        source_module='Preflight1',
        container=_TestContainer1('Stored by Preflight1'))
    self._container_manager.StoreContainer(
        source_module='ModuleA',
        container=_TestContainer2('Stored by ModuleA'))
    self._container_manager.StoreContainer(
        source_module='ModuleA',
        container=_TestContainer3('Stored by ModuleA'))

    with self.subTest('wrong_source'):
      for _ in range(0, 5):
        # "pop" should be ignored when the requesting module is not the one that
        # stored the container.
        actual = self._container_manager.GetContainers(
            requesting_module='ModuleA',
            container_class=_TestContainer1,
            pop=True)
        self.assertEqual(len(actual), 1)
        self.assertIn(_TestContainer1('Stored by Preflight1'), actual)

    with self.subTest('same_source'):
      actual = self._container_manager.GetContainers(
          requesting_module='ModuleA',
          container_class=_TestContainer2,
          pop=True)
      self.assertEqual(len(actual), 1)
      self.assertIn(_TestContainer2('Stored by ModuleA'), actual)

      # subsequent call returns nothing
      actual = self._container_manager.GetContainers(
          requesting_module='ModuleA',
          container_class=_TestContainer2,
          pop=True)
      self.assertEqual(len(actual), 0)

      # Other containers unaffected
      actual = self._container_manager.GetContainers(
          requesting_module='ModuleA',
          container_class=_TestContainer1)
      self.assertEqual(len(actual), 1)
      self.assertIn(_TestContainer1('Stored by Preflight1'), actual)

      actual = self._container_manager.GetContainers(
          requesting_module='ModuleA',
          container_class=_TestContainer3)
      self.assertEqual(len(actual), 1)
      self.assertIn(_TestContainer3('Stored by ModuleA'), actual)

  def test_StoreDuplicateContainers(self):
    """Tests that attempts to store duplicate containers are disregarded."""
    self._container_manager.ParseRecipe(_TEST_RECIPE)

    self._container_manager.StoreContainer(
        source_module='Preflight1', container=_TestContainer1('param1'))
    self._container_manager.StoreContainer(
        source_module='Preflight1', container=_TestContainer1('param1'))
    self._container_manager.StoreContainer(
        source_module='Preflight1', container=_TestContainer2('param1'))
    self._container_manager.StoreContainer(
        source_module='Preflight1', container=_TestContainer2('param1'))
    self._container_manager.StoreContainer(
        source_module='Preflight1', container=_TestContainer2('param2'))

    # Metadata is not considered in duplicate comparison
    c5 = _TestContainer3('param1')
    c6 = _TestContainer3('param1')
    c5.SetMetadata('key', 'foo')
    c6.SetMetadata('key', 'bar')
    self._container_manager.StoreContainer(
        source_module='Preflight1', container=c5)
    self._container_manager.StoreContainer(
        source_module='Preflight1', container=c6)

    # Dataframe members of containers have special handling; check that too
    df1 = pd.DataFrame(columns=['a', 'b'], data=[[1, 2], [3, 4]])
    df2 = pd.DataFrame(columns=['a', 'b'], data=[[1, 2], [3, 4]])
    df3 = pd.DataFrame(columns=['c', 'd'], data=[[5, 6], [7, 8]])
    self._container_manager.StoreContainer(
        source_module='Preflight1',
        container=containers.DataFrame(
            data_frame=df1, description='Description', name='name'))
    self._container_manager.StoreContainer(
        source_module='Preflight1',
        container=containers.DataFrame(
            data_frame=df2, description='Description', name='name'))
    self._container_manager.StoreContainer(
        source_module='Preflight1',
        container=containers.DataFrame(
            data_frame=df3, description='Description', name='name'))

    actual = self._container_manager.GetContainers(
        requesting_module='ModuleA', container_class=_TestContainer1)
    self.assertEqual(len(actual), 1)
    self.assertIn(_TestContainer1('param1'), actual)

    actual = self._container_manager.GetContainers(
        requesting_module='ModuleA', container_class=_TestContainer2)
    self.assertEqual(len(actual), 2)
    self.assertIn(_TestContainer2('param1'), actual)
    self.assertIn(_TestContainer2('param2'), actual)

    actual = self._container_manager.GetContainers(
        requesting_module='ModuleA', container_class=_TestContainer3)
    self.assertEqual(len(actual), 1)
    self.assertIn(_TestContainer3('param1'), actual)

    actual = self._container_manager.GetContainers(
        requesting_module='ModuleA', container_class=containers.DataFrame)
    self.assertEqual(len(actual), 2)
    self.assertIn(containers.DataFrame(
        data_frame=df1, description='Description', name='name'), actual)
    self.assertIn(containers.DataFrame(
        data_frame=df3, description='Description', name='name'), actual)


if __name__ == '__main__':
  unittest.main()
