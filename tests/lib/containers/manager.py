"""Tests for the ContainerManager."""

import unittest

from dftimewolf.lib.containers import containers
from dftimewolf.lib.containers import interface
from dftimewolf.lib.containers import manager


# Test recipe layout, for visual ease.
#
# Preflights:
#           Preflight1
#              |------------------------------------
#              |                 |                 |
#           Preflight2_1      Preflight2_2         |
#                                                  |
# Main Modules:                                    |
#           ModuleB           ModuleC           ModuleA
#      --------|                 |                 |
#      |       |------------------                 |
#      |    ModuleD                                |
#      |       |                                   |
#      --------|------------------------------------
#           ModuleE
#

_TEST_RECIPE = {
  'preflights': [
    {
      'name': 'Preflight1',
      'wants': []
    },
    {
      'name': 'Preflight2',
      'runtime_name': 'Preflight2_1',
      'wants': ['Preflight1']
    },
    {
      'name': 'Preflight2',
      'runtime_name': 'Preflight2_2',
      'wants': ['Preflight1']
    }
  ],
  'modules': [
    {
      'name': 'ModuleA',
      'wants': ['Preflight1']
    },
    {
      'name': 'ModuleB',
      'wants': []
    },
    {
      'name': 'ModuleC',
      'wants': []
    },
    {
      'name': 'ModuleD',
      'wants': ['ModuleB', 'ModuleC']
    },
    {
      'name': 'ModuleE',
      'wants': ['ModuleA', 'ModuleB', 'ModuleD']
    }
  ]
}


class _TestContainer1(interface.AttributeContainer):
  """A Test container."""
  CONTAINER_TYPE = 'test1'

  def __init__(self, param: str):
    super().__init__()
    self.param = param

  def __eq__(self, other: "_TestContainer1"):
    return self.param == other.param


class ContainerManagerTest(unittest.TestCase):
  """Tests for the ContainerManager."""

  def setUp(self):
    """Set up."""
    super().setUp()

    self._container_manager = manager.ContainerManager()
#
#  def tearDown(self):
#    """Tear down."""
#    super().tearDown()

  def test_GetWithoutRecipeParsed(self):
    """Tests an error is thrown getting containers before a recipe is parsed."""
    with self.assertRaisesRegex(
        RuntimeError, "Container manager has not parsed a recipe yet"):
      self._container_manager.GetContainers('test_module', containers.File)

  def test_StoreWithoutRecipeParsed(self):
    """Tests an error is thrown storing containers before a recipe is parsed."""
    with self.assertRaisesRegex(
        RuntimeError, "Container manager has not parsed a recipe yet"):
      self._container_manager.StoreContainer('test_module',
                                             containers.File('foo', 'foo'))

  def test_ContainerVisibility(self):
    """Tests correct delivery from generating to consuming modules."""
    self._container_manager.ParseRecipe(_TEST_RECIPE)

    # Have every module store a unique container
    for c in _TEST_RECIPE.get('preflights') + _TEST_RECIPE.get('modules'):
      name = c.get('runtime_name', c['name'])
      self._container_manager.StoreContainer(
        source_module=name, container=_TestContainer1(f'Stored by {name}'))

    with self.subTest('Preflight1'):
      # Only the container generated by itself
      actual = self._container_manager.GetContainers(
          requesting_module='Preflight1',
          container_class=_TestContainer1)
      self.assertEqual(len(actual), 1)
      self.assertIn(_TestContainer1('Stored by Preflight1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_2'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleA'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleB'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleC'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleD'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleE'), actual)

    with self.subTest('Preflight2_1'):
      # The container from itself, and Preflight1
      actual = self._container_manager.GetContainers(
          requesting_module='Preflight2_1',
          container_class=_TestContainer1)
      self.assertEqual(len(actual), 2)
      self.assertIn(_TestContainer1('Stored by Preflight1'), actual)
      self.assertIn(_TestContainer1('Stored by Preflight2_1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_2'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleA'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleB'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleC'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleD'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleE'), actual)

    with self.subTest('Preflight2_2'):
      # The container from itself, and Preflight1
      actual = self._container_manager.GetContainers(
          requesting_module='Preflight2_2',
          container_class=_TestContainer1)
      self.assertEqual(len(actual), 2)
      self.assertIn(_TestContainer1('Stored by Preflight1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_1'), actual)
      self.assertIn(_TestContainer1('Stored by Preflight2_2'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleA'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleB'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleC'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleD'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleE'), actual)

    with self.subTest('ModuleA'):
      # The container from itself, and Preflight1
      actual = self._container_manager.GetContainers(
          requesting_module='ModuleA',
          container_class=_TestContainer1)
      self.assertEqual(len(actual), 2)
      self.assertIn(_TestContainer1('Stored by Preflight1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_2'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleA'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleB'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleC'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleD'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleE'), actual)

    with self.subTest('ModuleB'):
      # The container from itself only
      actual = self._container_manager.GetContainers(
          requesting_module='ModuleB',
          container_class=_TestContainer1)
      self.assertEqual(len(actual), 1)
      self.assertNotIn(_TestContainer1('Stored by Preflight1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_2'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleA'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleB'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleC'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleD'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleE'), actual)

    with self.subTest('ModuleC'):
      # The container from itself only
      actual = self._container_manager.GetContainers(
          requesting_module='ModuleC',
          container_class=_TestContainer1)
      self.assertEqual(len(actual), 1)
      self.assertNotIn(_TestContainer1('Stored by Preflight1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_2'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleA'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleB'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleC'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleD'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleE'), actual)

    with self.subTest('ModuleD'):
      # The container from itself, Modules B and C
      actual = self._container_manager.GetContainers(
          requesting_module='ModuleD',
          container_class=_TestContainer1)
      self.assertEqual(len(actual), 3)
      self.assertNotIn(_TestContainer1('Stored by Preflight1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_2'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleA'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleB'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleC'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleD'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleE'), actual)

    with self.subTest('ModuleE'):
      # The container from itself, Modules A, B and D
      actual = self._container_manager.GetContainers(
          requesting_module='ModuleE',
          container_class=_TestContainer1)
      self.assertEqual(len(actual), 4)
      self.assertNotIn(_TestContainer1('Stored by Preflight1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_1'), actual)
      self.assertNotIn(_TestContainer1('Stored by Preflight2_2'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleA'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleB'), actual)
      self.assertNotIn(_TestContainer1('Stored by ModuleC'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleD'), actual)
      self.assertIn(_TestContainer1('Stored by ModuleE'), actual)

  def test_MultipleContainerTypes(self):
    """Tests that when a generator stores multiple types, only the requested are returned."""
    self.fail("Not implemented yet.")

  def test_MetadataFilter(self):
    """Tests that metdata filters correctly filter containers returned."""
    self.fail("Not implemented yet.")

  def test_PoppingContainers(self):
    """Tests container popping."""
    self.fail("Not implemented yet.")

    # Get container, non-popped

    # Then, get continaer, popped

    # then again, none returned



if __name__ == '__main__':
  unittest.main()
