#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Tests the Threaded Timesketch exporter."""

import unittest

import mock

from dftimewolf.lib.containers import containers
from dftimewolf.lib.exporters import timesketch
from dftimewolf.lib import errors
from tests.lib import modules_test_base


class TimesketchExporterTest(modules_test_base.ModuleTestBase):
  """Tests for the Threaded Timesketch exporter."""

  def setUp(self):
    self._InitModule(timesketch.TimesketchExporter)
    super().setUp()

  # pylint: disable=invalid-name
  @mock.patch('dftimewolf.lib.timesketch_utils.GetApiClient')
  def testSetupWithSketchId(self, mock_GetApiClient):
    """Tests the SetUp function."""
    mock_sketch = mock.Mock(id=1234, my_acl=['write'])
    mock_api_client = mock.Mock()
    mock_api_client.get_sketch.return_value = mock_sketch
    mock_GetApiClient.return_value = mock_api_client
    self._module.SetUp(
        incident_id='ticketId',
        sketch_id=1234,
        analyzers=None,
        token_password='blah',
        endpoint=None,
        username=None,
        password=None,
    )
    self.assertEqual(self._module.sketch_id, 1234)
    mock_api_client.get_sketch.assert_called_with(1234)

  # pylint: disable=invalid-name
  @mock.patch('dftimewolf.lib.timesketch_utils.GetApiClient')
  def testSetupWithReadonlySketchId(self, mock_GetApiClient):
    """Tests the SetUp function."""
    mock_sketch = mock.Mock(id=1234, my_acl=['read'])
    mock_api_client = mock.Mock()
    mock_api_client.get_sketch.return_value = mock_sketch
    mock_GetApiClient.return_value = mock_api_client
    with self.assertRaises(errors.DFTimewolfError) as error:
      self._module.SetUp(
          incident_id='ticketId',
          sketch_id=1234,
          analyzers=None,
          token_password='blah',
          endpoint=None,
          username=None,
          password=None,
      )

    self.assertEqual(
        error.exception.message, 'No write access to sketch ID 1234, aborting')

  # pylint: disable=invalid-name
  @mock.patch('timesketch_import_client.importer.ImportStreamer')
  @mock.patch('dftimewolf.lib.timesketch_utils.GetApiClient')
  def testNewSketchCreation(self, mock_GetApiClient, _):
    """Tests the SetUp function."""
    mock_sketch = mock.Mock(id=1234, my_acl=['write'])
    mock_sketch.api.api_root = 'timesketch.com/api/v1'
    mock_api_client = mock.Mock()
    mock_api_client.get_sketch.return_value = None
    mock_api_client.create_sketch.return_value = mock_sketch
    mock_GetApiClient.return_value = mock_api_client
    self._module.SetUp(
        incident_id='ticketId',
        sketch_id=None,
        analyzers=None,
        token_password='blah',
        endpoint=None,
        username=None,
        password=None,
    )

    self._module.StoreContainer(containers.File('file.ext', '/tmp/file.ext'))
    self._ProcessModule()

    self.assertEqual(self._module.sketch_id, 1234)
    mock_api_client.create_sketch.assert_called_with(
      'Sketch for incident ID: ticketId', 'Sketch generated by dfTimewolf')
    report = self._module.GetContainers(containers.Report)[0]
    self.assertEqual(report.module_name, 'TimesketchExporter')
    self.assertEqual(
        report.text,
        'Your Timesketch URL is: timesketch.com/sketch/1234/')
    self.assertEqual(report.text_format, 'markdown')

  # pylint: disable=invalid-name
  @mock.patch('dftimewolf.lib.exporters.timesketch.TimesketchExporter._RunAnalyzers')  # pylint: disable=line-too-long'')
  @mock.patch('time.sleep')
  @mock.patch('timesketch_import_client.importer.ImportStreamer')
  @mock.patch('dftimewolf.lib.timesketch_utils.GetApiClient')
  def testWaitForTimeline(self,
      mock_GetApiClient,
      unused_streamer,
      unused_sleep,
      mock_RunAnalyzers):
    """Tests the SetUp function."""
    mock_sketch = mock.Mock(id=1234, my_acl=['write'])
    mock_sketch.api.api_root = 'timesketch.com/api/v1'
    mock_RunAnalyzers.return_value = None
    mock_api_client = mock.Mock()
    mock_api_client.get_sketch.return_value = mock_sketch
    mock_api_client.create_sketch.return_value = mock_sketch
    # We also mock the attributes for the underlying .client object
    mock_api_client.client.get_sketch.return_value = mock_sketch
    mock_api_client.client.create_sketch.return_value = mock_sketch
    mock_GetApiClient.return_value = mock_api_client

    mock_timeline = mock.Mock()
    mock_timeline.status = 'ready'

    mock_sketch.list_timelines.return_value = [mock_timeline]

    self._module.SetUp(
        incident_id='ticketId',
        sketch_id=None,
        analyzers=None,
        wait_for_timelines=True,
        token_password='blah',
        endpoint=None,
        username=None,
        password=None,
    )
    self._module.StoreContainer(containers.File('file.ext', '/tmp/file.ext'))
    self._ProcessModule()

    mock_sketch.list_timelines.assert_called_once()


if __name__ == '__main__':
  unittest.main()
